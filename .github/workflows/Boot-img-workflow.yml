name: Kernel Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      KERNEL_REPO: BlissRoms-Devices/android_kernel_asus_sm8250
      CLANG_REPO: SA9990/proton-clang
      KERNEL_DIR: android_kernel_asus_sm8250
      CLANG_DIR: proton-clang
      AOSP_GCC_64_URL: https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9
      AOSP_GCC_32_URL: https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9
      GCC_DIR: aosp-gcc
      DEFCONFIG: vendor/obiwan_defconfig
      ARCH: arm64
      OUT_DIR: out

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v3
        with:
          repository: ${{ env.KERNEL_REPO }}
          path: ${{ env.KERNEL_DIR }}
          fetch-depth: 1

      - name: Checkout Proton Clang
        uses: actions/checkout@v3
        with:
          repository: ${{ env.CLANG_REPO }}
          path: ${{ env.CLANG_DIR }}
          fetch-depth: 1

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison flex libssl-dev make clang lld ccache ninja-build

      - name: Download AOSP GCC Toolchains
        run: |
          # Download and extract AOSP GCC 64-bit toolchain
          git clone --depth=1 ${{ env.AOSP_GCC_64_URL }} ${{ env.GCC_DIR }}/aarch64-linux-android-4.9
          
          # Download and extract AOSP GCC 32-bit toolchain
          git clone --depth=1 ${{ env.AOSP_GCC_32_URL }} ${{ env.GCC_DIR }}/arm-linux-androideabi-4.9

      - name: Build Kernel
        working-directory: ${{ env.KERNEL_DIR }}
        run: |
          # Set up environment for Proton Clang and enable ccache
          export PATH="${{ env.CLANG_DIR }}/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          export CC=clang
          export LD=ld.lld
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CCACHE_COMPRESS=1
          export CCACHE_BASEDIR=${{ env.KERNEL_DIR }}
          export CCACHE_SLOPPINESS=time_macros,include_file_mtime
          export CCACHE_CPP2=yes

          # Set up AOSP GCC cross-compilers
          export CROSS_COMPILE=${{ env.GCC_DIR }}/aarch64-linux-android-4.9/bin/aarch64-linux-android-
          export CROSS_COMPILE_ARM32=${{ env.GCC_DIR }}/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-

          # Additional Compiler Flags for Optimization
          export CFLAGS="-O3 -pipe -mcpu=cortex-a76 -mtune=cortex-a76"
          export LDFLAGS="-Wl,--icf=safe"

          # Configure the kernel using Proton Clang with optimizations
          make O=${{ env.OUT_DIR }} ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE ${{ env.DEFCONFIG }} 2>&1 | tee build.log

          # Build the kernel using Ninja if supported for faster builds, else fallback to make
          if [ -f build.ninja ]; then
            ninja -j$(nproc) -C ${{ env.OUT_DIR }} 2>&1 | tee -a build.log
          else
            make -j$(nproc) O=${{ env.OUT_DIR }} ARCH=$ARCH \
            CC=$CC \
            LD=$LD \
            CLANG_TRIPLE=$CLANG_TRIPLE \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32 \
            CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" 2>&1 | tee -a build.log
          fi

      - name: Upload Kernel Build Artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: Kernel
          path: ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz-dtb

      - name: Upload Build Log
        uses: actions/upload-artifact@v3
        with:
          name: Build Log
          path: ${{ env.KERNEL_DIR }}/build.log
